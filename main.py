"""
–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ Bybit
--------------------------------------------
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç—Ä–µ–π–¥–µ—Ä –∏ Telegram-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.
–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SIGINT (Ctrl+C) –∏ SIGTERM.
"""

import asyncio
import logging
import signal
from config import load_config
from trader.core import CopyTrader
from telegram.ui import TelegramUI


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)

logger = logging.getLogger(__name__)


async def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞...")

    cfg = load_config()
    trader = CopyTrader(cfg)
    tg = TelegramUI(cfg, trader)

    # –°–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
    trader_task = asyncio.create_task(trader.start())
    tg_task = asyncio.create_task(tg.run())

    # –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    async def shutdown():
        logger.warning("üü• –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø–æ —Å–∏–≥–Ω–∞–ª—É...")
        trader_task.cancel()
        tg_task.cancel()
        try:
            await trader.master_api.close()
            await trader.follower_api.close()
        except Exception:
            pass
        await asyncio.sleep(0.5)
        logger.info("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        asyncio.get_event_loop().stop()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    loop = asyncio.get_running_loop()
    for s in (signal.SIGINT, signal.SIGTERM):
        try:
            loop.add_signal_handler(s, lambda s=s: asyncio.create_task(shutdown()))
        except NotImplementedError:
            # Windows –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç add_signal_handler
            pass

    await asyncio.gather(trader_task, tg_task)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.warning("üü• –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
