import logging
import requests


class TelegramAlerts:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    (–æ —Ä–∏—Å–∫–∞—Ö, –∞–≤—Ç–æ-–ø–∞—É–∑–µ, SL, TP, –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–æ–∫).
    """

    def __init__(self, cfg):
        self.cfg = cfg
        self.token = cfg.get("TELEGRAM_BOT_TOKEN")
        self.chat_ids = str(cfg.get("TELEGRAM_CHAT_ID", "")).split(",")

    # ====================== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ======================
    def send(self, text: str, disable_preview=True):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ Telegram-—á–∞—Ç—ã"""
        if not self.token or not self.chat_ids:
            logging.warning("‚ùó Telegram: –Ω–µ –∑–∞–¥–∞–Ω—ã —Ç–æ–∫–µ–Ω –∏–ª–∏ chat_id")
            return

        for chat_id in self.chat_ids:
            try:
                url = f"https://api.telegram.org/bot{self.token}/sendMessage"
                payload = {
                    "chat_id": chat_id.strip(),
                    "text": text,
                    "parse_mode": "HTML",
                    "disable_web_page_preview": disable_preview,
                }
                r = requests.post(url, json=payload, timeout=10)
                if r.status_code != 200:
                    logging.warning(f"Telegram API error: {r.text}")
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ Telegram –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

    # ====================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –û –°–û–ë–´–¢–ò–Ø–• ======================
    def notify_position_open(self, symbol, side, qty, price):
        self.send(f"üìà <b>–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>\n"
                  f"{symbol} | {side} {qty}\n"
                  f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{price}</b>")

    def notify_position_close(self, symbol, side, pnl):
        emoji = "‚úÖ" if pnl >= 0 else "‚ùå"
        self.send(f"{emoji} <b>–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>\n"
                  f"{symbol} | PnL: <b>{pnl:.2f} USDT</b>")

    def notify_stoploss(self, symbol, change):
        self.send(f"üü• <b>–°—Ä–∞–±–æ—Ç–∞–ª –ª–æ–∫–∞–ª—å–Ω—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å</b>\n"
                  f"{symbol}\n"
                  f"–¶–µ–Ω–∞ —É—à–ª–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–∞ {abs(change):.2f}%")

    def notify_autopause(self, drawdown):
        self.send(f"‚ö†Ô∏è <b>–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ</b>\n"
                  f"–ü—Ä–æ—Å–∞–¥–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: {drawdown:.1f}%\n"
                  f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")

    def notify_liq_buffer(self, symbol, buffer):
        self.send(f"‚ö†Ô∏è <b>–ú–∞–ª—ã–π –±—É—Ñ–µ—Ä –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏</b>\n"
                  f"{symbol}\n"
                  f"–ë—É—Ñ–µ—Ä: {buffer:.1f}%")

    def notify_volatility(self, symbol, vol, factor):
        self.send(f"üå™ <b>–í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å</b>\n"
                  f"{symbol}: {vol:.1f}% –∑–∞ 24—á\n"
                  f"–†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–º–µ–Ω—å—à–µ–Ω √ó{factor}")
