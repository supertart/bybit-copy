"""
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–¥–µ–ª–∫–∞—Ö/—Ä–∏—Å–∫–∞—Ö.
–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å ui.py (—Ñ—É–Ω–∫—Ü–∏—è send_trade_alert(trade_info)).
"""

from datetime import datetime
import logging
import requests


# ============= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–û–†–ú–ê–¢–¢–ï–†–´ =============

def _ts_to_str(ms: int) -> str:
    """–ü–µ—á–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç."""
    try:
        return datetime.fromtimestamp(int(ms) / 1000).strftime("%d.%m.%Y %H:%M:%S")
    except Exception:
        return "-"

def _fmt_num(x, digits=4):
    try:
        return f"{float(x):.{digits}f}"
    except Exception:
        return str(x)

def _fmt_pnl(x):
    try:
        val = float(x)
        sign = "üü¢" if val >= 0 else "üî¥"
        return f"{sign} {val:.2f} USDT"
    except Exception:
        return str(x)

def _fmt_duration(ms_start: int | None, ms_end: int | None) -> str:
    if not ms_start:
        return "‚Äî"
    if not ms_end:
        return "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
    try:
        sec = (int(ms_end) - int(ms_start)) // 1000
        if sec < 60:
            return f"{sec}s"
        minutes = sec // 60
        if minutes < 60:
            return f"{minutes}m"
        hours = minutes // 60
        minutes = minutes % 60
        return f"{hours}h {minutes}m"
    except Exception:
        return "‚Äî"


# ============= –ü–£–ë–õ–ò–ß–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø ui.py =============

def send_trade_alert(trade: dict) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è Telegram –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏/–∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏.

    –û–∂–∏–¥–∞–µ–º—ã–µ –∫–ª—é—á–∏ trade (–Ω–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã):
      symbol, side, qty,
      open_price, close_price,
      net_pnl, leverage, dca_count,
      open_time_ms, close_time_ms,
      event ("open" | "close" | "adjust")
    """
    symbol     = trade.get("symbol", "-")
    side       = trade.get("side", "-")
    qty        = trade.get("qty", 0)
    open_p     = trade.get("open_price")
    close_p    = trade.get("close_price")
    pnl        = trade.get("net_pnl")
    lev        = trade.get("leverage")
    dca        = trade.get("dca_count")
    t_open_ms  = trade.get("open_time_ms")
    t_close_ms = trade.get("close_time_ms")
    event      = (trade.get("event") or "").lower()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    if event == "open":
        title = "üìà <b>–û—Ç–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>"
    elif event == "close":
        title = "üìâ <b>–ó–∞–∫—Ä—ã—Ç–∞ –ø–æ–∑–∏—Ü–∏—è</b>"
    elif event == "adjust":
        title = "‚öôÔ∏è <b>–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ–∑–∏—Ü–∏–∏</b>"
    else:
        title = "‚ÑπÔ∏è <b>–°–æ–±—ã—Ç–∏–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏</b>"

    rows = [
        f"{title}",
        f"{symbol} | {side} | –∫–æ–ª-–≤–æ: <b>{_fmt_num(qty, 3)}</b>",
    ]

    if open_p is not None:
        rows.append(f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>{_fmt_num(open_p, 4)}</b>")
    if close_p is not None:
        rows.append(f"–¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: <b>{_fmt_num(close_p, 4)}</b>")

    if pnl is not None and event in ("close",):
        rows.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{_fmt_pnl(pnl)}</b>")

    if lev is not None:
        rows.append(f"–ü–ª–µ—á–æ: <b>{lev}x</b>")
    if dca is not None:
        rows.append(f"–£—Å—Ä–µ–¥–Ω–µ–Ω–∏–π: <b>{dca}</b>")

    if t_open_ms:
        rows.append(f"–í—Ä–µ–º—è –æ—Ç–∫—Ä—ã—Ç–∏—è: <b>{_ts_to_str(t_open_ms)}</b>")
    if t_close_ms:
        rows.append(f"–í—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è: <b>{_ts_to_str(t_close_ms)}</b>")
        rows.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{_fmt_duration(t_open_ms, t_close_ms)}</b>")

    return "\n".join(rows)


# ============= –ù–ï–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ô –ö–õ–ê–°–°-–û–¢–ü–†–ê–í–©–ò–ö =============

class TelegramAlerts:
    """
    –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–ø—Ä–∞–≤—â–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram –ø–æ —Ç–æ–∫–µ–Ω—É –∏ chat_id.
    –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    """
    def __init__(self, token: str, chat_ids: str | list[str]):
        self.token = token
        if isinstance(chat_ids, str):
            self.chat_ids = [cid.strip() for cid in chat_ids.split(",") if cid.strip()]
        else:
            self.chat_ids = chat_ids or []

    def send(self, text: str, parse_mode: str = "HTML", disable_preview: bool = True):
        if not self.token or not self.chat_ids:
            logging.warning("TelegramAlerts: –Ω–µ –∑–∞–¥–∞–Ω—ã token/chat_id")
            return
        url = f"https://api.telegram.org/bot{self.token}/sendMessage"
        for cid in self.chat_ids:
            try:
                r = requests.post(
                    url,
                    json={
                        "chat_id": cid,
                        "text": text,
                        "parse_mode": parse_mode,
                        "disable_web_page_preview": disable_preview,
                    },
                    timeout=10,
                )
                if r.status_code != 200:
                    logging.warning(f"Telegram API error: {r.text}")
            except Exception as e:
                logging.warning(f"Telegram send error: {e}")
