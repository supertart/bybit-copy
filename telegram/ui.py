import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from trader.stats import StatsManager
from config import save_config
from telegram.messages import get_param_description

# ============================================================
#  Telegram UI ‚Äî –º–µ–Ω—é, –∫–Ω–æ–ø–∫–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# ============================================================

class TelegramUI:
    def __init__(self, cfg, trader):
        self.cfg = cfg
        self.trader = trader
        self.stats = trader.stats
        self.bot = Bot(token=cfg["TELEGRAM_BOT_TOKEN"])
        self.dp = Dispatcher(self.bot)

        self._register_handlers()

    # ====================== –ó–ê–ü–£–°–ö ======================
    async def run(self):
        logging.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        await self.dp.start_polling()

    # ====================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ======================
    def _register_handlers(self):
        self.dp.register_message_handler(self.cmd_start, commands=["start"])
        self.dp.register_callback_query_handler(self.on_callback)

    async def cmd_start(self, message: types.Message):
        text = "‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞"
        await message.answer(text, reply_markup=self.main_menu())

    # ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================
    def main_menu(self):
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("üìà –û—Å–Ω–æ–≤–Ω—ã–µ", callback_data="cat_main"),
            InlineKeyboardButton("üìä –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="cat_scale"),
            InlineKeyboardButton("üßÆ –†–∏—Å–∫", callback_data="cat_risk"),
            InlineKeyboardButton("‚è∏ –ü–∞—É–∑–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="cat_pause"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats_menu"),
        )
        return kb

    def back_menu(self):
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        return kb

    def stats_menu(self):
        kb = InlineKeyboardMarkup(row_width=3)
        kb.add(
            InlineKeyboardButton("üïê 1–¥", callback_data="stat_1"),
            InlineKeyboardButton("üóì 7–¥", callback_data="stat_7"),
            InlineKeyboardButton("üìÖ 30–¥", callback_data="stat_30"),
            InlineKeyboardButton("üß≠ 90–¥", callback_data="stat_90"),
            InlineKeyboardButton("üìä –í—Å—è –∏—Å—Ç–æ—Ä–∏—è", callback_data="stat_all"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stat_refresh"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main")
        )
        return kb

    # ====================== –ö–ê–¢–ï–ì–û–†–ò–ò ======================
    def category_menu(self, category):
        """–°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        cat_map = {
            "cat_main": [
                "COPY_ACTIVE", "COPY_TP", "COPY_SL", "DRY_RUN", "POSITION_IDX"
            ],
            "cat_scale": [
                "SIZE_SCALE", "DYNAMIC_SCALE", "DYN_SCALE_FACTOR",
                "VOLATILITY_SCALE"
            ],
            "cat_risk": [
                "MAX_EQUITY_RISK_PCT", "MIN_LIQ_BUFFER_PCT",
                "MAX_DCA_PER_TRADE", "LOCAL_SL_PCT",
                "LIQ_BUFFER_EMERGENCY", "CUT_PERCENT"
            ],
            "cat_pause": [
                "EQUITY_DRAWDOWN_PCT", "AUTO_CLOSE_ON_DRAWDOWN",
                "RISK_ALERTS"
            ]
        }

        kb = InlineKeyboardMarkup(row_width=1)
        for p in cat_map.get(category, []):
            val = self.cfg.get(p)
            text = f"{p}: {val}"
            kb.add(InlineKeyboardButton(text, callback_data=f"param_{p}"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        return kb

    # ====================== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK ======================
    async def on_callback(self, query: types.CallbackQuery):
        data = query.data
        if data == "back_main":
            await query.message.edit_text("‚öôÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=self.main_menu())

        elif data.startswith("cat_"):
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä:",
                reply_markup=self.category_menu(data)
            )

        elif data.startswith("param_"):
            param = data.replace("param_", "")
            desc = get_param_description(param)
            value = self.cfg.get(param)
            msg = f"üîß <b>{param}</b>\n\n{desc}\n\n–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: <b>{value}</b>"
            await query.message.edit_text(msg, reply_markup=self.param_menu(param))

        elif data.startswith("stat_"):
            days = {
                "stat_1": 1,
                "stat_7": 7,
                "stat_30": 30,
                "stat_90": 90,
                "stat_all": 0,
                "stat_refresh": -1
            }[data]
            if days == -1:
                await query.message.edit_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...", reply_markup=self.stats_menu())
            else:
                report = self.stats.get_report(days)
                await query.message.edit_text(report, reply_markup=self.stats_menu())

        await query.answer()

    def param_menu(self, param):
        """–ú–µ–Ω—é –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)"""
        kb = InlineKeyboardMarkup()
        kb.add(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"edit_{param}"))
        kb.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_main"))
        return kb
