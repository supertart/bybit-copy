import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest

from telegram.messages import (
    get_welcome_text,
    get_settings_text,
    get_positions_text,
    get_stats_loading_text,
    build_stats_text,
    main_menu_kb,
    settings_inline_kb,
    settings_net_kb,
    settings_risk_kb,
    settings_alerts_kb,
)

logger = logging.getLogger(__name__)

class TelegramUI:
    def __init__(self, cfg: dict, trader):
        self.cfg = cfg
        self.trader = trader

        self.bot = Bot(token=self.cfg["TELEGRAM_BOT_TOKEN"], parse_mode="HTML")
        self.dp = Dispatcher(storage=MemoryStorage())

        # –ö–æ–º–∞–Ω–¥—ã
        self.dp.message.register(self.cmd_start, Command("start"))
        self.dp.message.register(self.cmd_stats, Command("stats"))
        self.dp.message.register(self.on_text)

        # Callback-–∏ –∏–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        self.dp.callback_query.register(self.cb_settings_router, F.data.startswith("settings:"))

    # ---------------- –ö–æ–º–∞–Ω–¥—ã / –°–æ–æ–±—â–µ–Ω–∏—è ----------------

    async def cmd_start(self, msg: Message):
        await msg.answer(get_welcome_text(), reply_markup=main_menu_kb())

    async def cmd_stats(self, msg: Message):
        # 1) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–∑–∞–≥—Ä—É–∑–∫–∞" —Å reply keyboard (–Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        loading = await msg.answer(get_stats_loading_text(), reply_markup=main_menu_kb())

        try:
            # 2) –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –±–µ—Ä—ë–º –±–∞–ª–∞–Ω—Å—ã
            master_balance_task = asyncio.create_task(self.trader.master_api.get_balance())
            follower_balance_task = asyncio.create_task(self.trader.follower_api.get_balance())
            summary = self.trader.stats.get_summary()
            master_balance, follower_balance = await asyncio.gather(master_balance_task, follower_balance_task)

            text = build_stats_text(
                master_env=self.trader.master_env,
                follower_env=self.trader.follower_env,
                master_balance=master_balance,
                follower_balance=follower_balance,
                summary=summary,
                currency="USDT",
            )

            # 3) –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ª–æ–∞–¥–µ—Ä–∞
            try:
                await loading.edit_text(text)
            except TelegramBadRequest:
                # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ª—å–∑—è ‚Äî —É–¥–∞–ª—è–µ–º –ª–æ–∞–¥–µ—Ä –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await loading.delete()
                except Exception:
                    pass
                await msg.answer(text, reply_markup=main_menu_kb())

        except Exception as e:
            logger.warning(f"[TelegramUI] –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            # —Ç–æ–∂–µ: –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ‚Äî —É–¥–∞–ª—è–µ–º –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ
            try:
                await loading.edit_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            except TelegramBadRequest:
                try:
                    await loading.delete()
                except Exception:
                    pass
                await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu_kb())

    async def on_text(self, msg: Message):
        text = (msg.text or "").strip()

        if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await msg.answer(get_settings_text(), reply_markup=settings_inline_kb())
            return

        if text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self.cmd_stats(msg)
            return

        if text == "üìÇ –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏":
            await msg.answer(get_positions_text(), reply_markup=main_menu_kb())
            return

        if text == "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
            await msg.answer("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=main_menu_kb())
            # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–≤–µ—Å–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç —á–µ—Ä–µ–∑ systemd –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–∏–≥–Ω–∞–ª
            return

        # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ.", reply_markup=main_menu_kb())

    # ---------------- Callback-–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ ----------------

    async def cb_settings_router(self, cq: CallbackQuery):
        data = cq.data

        if data == "settings:back":
            await cq.message.edit_text(get_settings_text(), reply_markup=settings_inline_kb())
            await cq.answer()
            return

        if data == "settings:set_net":
            await cq.message.edit_text("üåê –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—Ä–≥–æ–≤—É—é —Å–µ—Ç—å:", reply_markup=settings_net_kb())
            await cq.answer()
            return

        if data == "settings:set_risk":
            await cq.message.edit_text("üõ°Ô∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ –∏ —Ä–µ–∂–∏–º–æ–≤:", reply_markup=settings_risk_kb())
            await cq.answer()
            return

        if data == "settings:set_alerts":
            await cq.message.edit_text("üîî –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏:", reply_markup=settings_alerts_kb())
            await cq.answer()
            return

        # –ü–æ–¥—Å–µ—Ç—å –≤—ã–±–æ—Ä–∞
        if data.startswith("settings:net:"):
            net = data.split(":")[-1]
            await cq.answer(f"–°–µ—Ç—å –≤—ã–±—Ä–∞–Ω–∞: {net}")
            # –∑–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥ –∏–ª–∏ state.json –∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
            await cq.message.edit_text(get_settings_text(), reply_markup=settings_inline_kb())
            return

        if data == "settings:risk:max_risk":
            await cq.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ MAX_RISK_PCT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5).")
            await cq.message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, % —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É. (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)")
            return

        if data == "settings:risk:test_mode":
            await cq.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ TEST_MODE (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞).")
            await cq.message.edit_text("TEST_MODE –ø–µ—Ä–µ–∫–ª—é—á—ë–Ω (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=settings_inline_kb())
            return

        if data == "settings:alerts:toggle":
            await cq.answer("–û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞).")
            await cq.message.edit_text("üîî –û–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã (–∑–∞–≥–ª—É—à–∫–∞).", reply_markup=settings_inline_kb())
            return

        await cq.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")

    # ---------------- –ó–∞–ø—É—Å–∫ ----------------

    async def run(self):
        logger.info("ü§ñ Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")
        await self.dp.start_polling(self.bot)

    async def close(self):
        try:
            await self.bot.session.close()
        except Exception:
            pass
