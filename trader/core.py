"""
–ú–æ–¥—É–ª—å —è–¥—Ä–∞ –±–æ—Ç–∞ CopyTrader
---------------------------
–û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å–¥–µ–ª–æ–∫ –º–∞—Å—Ç–µ—Ä–∞ –∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
"""

import asyncio
import logging
from trader.risk import RiskManager
from trader.stats import StatsManager
from utils.api_wrappers import BybitAPI

logger = logging.getLogger(__name__)

class CopyTrader:
    def __init__(self, cfg: dict):
        self.cfg = cfg
        self.master_mode = cfg.get("MASTER_MODE", "trade")
        self.master_env = cfg.get("MASTER_ENV", "mainnet")
        self.follower_env = cfg.get("FOLLOWER_ENV", "mainnet")

        logger.info(f"üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ ({self.master_mode}, env={self.master_env})")

        self.master_api = BybitAPI(
            api_key=cfg.get("MASTER_API_KEY"),
            api_secret=cfg.get("MASTER_API_SECRET"),
            role="MASTER",
            env=self.master_env,
        )
        self.follower_api = BybitAPI(
            api_key=cfg.get("FOLLOWER_API_KEY"),
            api_secret=cfg.get("FOLLOWER_API_SECRET"),
            role="FOLLOWER",
            env=self.follower_env,
        )

        self.stats = StatsManager(cfg)
        self.risk = RiskManager(cfg, self.follower_api)
        logger.info(f"üì° –ü–æ–¥–ø–∏—Å—á–∏–∫ env={self.follower_env}")

        self.ignored_symbols = set()

    async def fetch_master_positions(self):
        try:
            return await self.master_api.get_open_positions() or []
        except Exception as e:
            logger.warning(f"[MASTER] fetch_master_positions failed: {e}")
            return []

    async def fetch_follower_positions(self):
        try:
            return await self.follower_api.get_open_positions() or []
        except Exception as e:
            logger.warning(f"[FOLLOWER] fetch_follower_positions failed: {e}")
            return []

    async def run_copy_loop(self):
        logger.info("üü¢ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫")

        master_positions = await self.fetch_master_positions()
        self.ignored_symbols = {pos["symbol"] for pos in master_positions}
        if self.ignored_symbols:
            logger.info(
                f"üî∏ –ù–∞–π–¥–µ–Ω–æ {len(self.ignored_symbols)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –º–∞—Å—Ç–µ—Ä–∞. "
                f"–û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ: {', '.join(self.ignored_symbols)}"
            )
        else:
            logger.info("‚úÖ –£ –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–Ω—ë—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.")

        try:
            while True:
                master_positions = await self.fetch_master_positions()
                follower_positions = await self.fetch_follower_positions()

                master_symbols = {p["symbol"] for p in master_positions}
                follower_symbols = {p["symbol"] for p in follower_positions}

                for pos in master_positions:
                    symbol = pos["symbol"].upper()
                    side = pos["side"]
                    qty = float(pos.get("contracts") or pos.get("size") or 0)
                    price = float(pos.get("entryPrice") or 0)
                    leverage = int(pos.get("leverage") or 10)

                    if symbol in self.ignored_symbols:
                        continue

                    if symbol not in follower_symbols and qty > 0:
                        logger.info(f"üÜï –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞: {symbol} ({side}, qty={qty})")
                        balance = await self.follower_api.get_balance()
                        risk_check = self.risk.apply_risk_rules(symbol, side, price, balance, leverage)
                        if not risk_check["allowed"]:
                            logger.warning(f"üö´ –°–¥–µ–ª–∫–∞ {symbol} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: {risk_check['reason']}")
                            continue

                        await self.follower_api.open_position(symbol, side, qty, leverage)
                        self.stats.record_open_trade(symbol, side, qty, price, leverage)
                        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ {symbol} –æ—Ç–∫—Ä—ã—Ç–∞ —É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.")
                        self.ignored_symbols.add(symbol)

                for sym in list(self.ignored_symbols):
                    if sym not in master_symbols:
                        logger.info(f"üîª –ú–∞—Å—Ç–µ—Ä –∑–∞–∫—Ä—ã–ª {sym}. –ó–∞–∫—Ä—ã–≤–∞–µ–º –∏ —É –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.")
                        await self.follower_api.close_position(sym)
                        self.stats.record_close_trade(sym, price=0.0, pnl=0.0)
                        self.ignored_symbols.remove(sym)

                self.stats.update_from_positions(follower_positions)
                await asyncio.sleep(self.cfg.get("POLL_INTERVAL_SEC", 5))

        except asyncio.CancelledError:
            logger.warning("üü• –¶–∏–∫–ª –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT/SIGTERM).")
            raise
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await asyncio.sleep(5)

    async def start(self):
        await self.run_copy_loop()
