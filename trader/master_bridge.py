import logging
from utils.api_wrappers import BybitHTTP


class MasterBridge:
    """
    –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–∑–∏—Ü–∏—è—Ö –º–∞—Å—Ç–µ—Ä–∞.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
    - –æ–±—ã—á–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (trade)
    - –º–∞—Å—Ç–µ—Ä –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ (copy)
    """

    def __init__(self, cfg):
        mode = cfg.get("MASTER_MODE", "trade").lower()
        net = cfg.get("MASTER_NET", "mainnet").lower()
        testnet = net == "testnet"

        self.mode = mode
        self.api = BybitHTTP(
            cfg["MASTER_API_KEY"],
            cfg["MASTER_API_SECRET"],
            testnet=testnet
        )

        logging.info(f"üß© –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Ç–µ—Ä–∞ ({mode}, —Å–µ—Ç—å={net})")

    def get_positions(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –º–∞—Å—Ç–µ—Ä–∞"""
        if self.mode == "copy":
            return self.get_copy_positions()
        else:
            return self.get_trade_positions()

    def get_trade_positions(self):
        """–ü–æ–∑–∏—Ü–∏–∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        return self.api.get_positions()

    def get_copy_positions(self):
        """–ü–æ–∑–∏—Ü–∏–∏ –º–∞—Å—Ç–µ—Ä–∞ –∫–æ–ø–∏—Ç—Ä–µ–π–¥–∏–Ω–≥–∞ Bybit"""
        try:
            res = self.api._request("GET", "/v5/copytrading/master/positions")
            if not res:
                return []
            return res.get("list", [])
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∑–∏—Ü–∏–π –∫–æ–ø–∏—Ç—Ä–µ–π–¥-–º–∞—Å—Ç–µ—Ä–∞: {e}")
            return []
