import logging
import time
from utils.api_wrappers import BybitHTTP
from config import save_config


class RiskManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∏—Å–∫–∞–º–∏: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å—Ç–æ–ø-–ª–æ—Å—Å—ã, –ª–∏–∫–≤–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä, –∞–≤—Ç–æ-–ø–∞—É–∑–∞.
    """

    def __init__(self, cfg, follower_api: BybitHTTP):
        self.cfg = cfg
        self.api = follower_api
        self.last_equity = 0
        self.max_equity = 0
        self.last_check = 0

    # ====================== –†–ê–°–ß–Å–¢ –†–ê–ó–ú–ï–†–ê ===========================
    def calculate_scaled_qty(self, master_size, master_price, symbol):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
        –£—á–∏—Ç—ã–≤–∞–µ—Ç SIZE_SCALE, DYNAMIC_SCALE, DYN_SCALE_FACTOR –∏ Smart-Scaling –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏.
        """
        if master_size == 0:
            return 0.0

        size_scale = self.cfg.get("SIZE_SCALE", 1.0)
        dyn_scale = self.cfg.get("DYN_SCALE_FACTOR", 0.9)
        qty = master_size * size_scale

        # ===== Smart-Scaling –ø–æ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ =====
        if self.cfg.get("VOLATILITY_SCALE", True):
            vol = self.api.get_volatility(symbol)
            if vol > 25:
                qty *= 0.5
                logging.info(f"‚ö†Ô∏è {symbol}: –≤—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {vol:.1f}% ‚Üí —Ä–∞–∑–º–µ—Ä √ó0.5")
            elif vol > 15:
                qty *= 0.7
                logging.info(f"‚ö†Ô∏è {symbol}: —Å—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å {vol:.1f}% ‚Üí —Ä–∞–∑–º–µ—Ä √ó0.7")

        # ===== –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—à—Ç–∞–± –ø–æ equity =====
        if self.cfg.get("DYNAMIC_SCALE", True):
            master_eq = self.api.get_master_equity()
            follower_eq = self.api.get_follower_equity()
            if master_eq > 0:
                ratio = (follower_eq / master_eq) * dyn_scale
                qty *= min(size_scale, ratio)
                logging.info(f"üîπ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ: {ratio:.2f}")

        # ===== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ equity-—Ä–∏—Å–∫ % =====
        follower_eq = self.api.get_follower_equity()
        max_risk = self.cfg.get("MAX_EQUITY_RISK_PCT", 2.0)
        if follower_eq > 0:
            max_notional = follower_eq * (max_risk / 100)
            qty_value = master_price * qty
            if qty_value > max_notional:
                qty = max_notional / master_price
                logging.info(f"‚ö†Ô∏è {symbol}: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ —Ä–∏—Å–∫—É {max_risk}% ‚Üí {qty}")

        return round(qty, 3)

    # ====================== –õ–û–ö–ê–õ–¨–ù–´–ô STOP LOSS ======================
    async def check_local_stoploss(self, symbol):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é, –µ—Å–ª–∏ —Ü–µ–Ω–∞ —É—à–ª–∞ –ø—Ä–æ—Ç–∏–≤ –±–æ–ª—å—à–µ LOCAL_SL_PCT%"""
        local_sl = self.cfg.get("LOCAL_SL_PCT", 25)
        if local_sl <= 0:
            return

        pos = self.api.get_position(symbol)
        if not pos or float(pos["size"]) == 0:
            return

        entry = float(pos.get("avgPrice") or 0)
        mark = self.api.get_mark_price(symbol)
        if entry == 0 or mark == 0:
            return

        change = (mark - entry) / entry * (1 if pos["side"] == "Buy" else -1) * 100
        if change <= -local_sl:
            logging.warning(f"üü• {symbol}: —Ü–µ–Ω–∞ —É—à–ª–∞ –ø—Ä–æ—Ç–∏–≤ –Ω–∞ {abs(change):.2f}% > {local_sl}% ‚Üí –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
            self.api.close_position(symbol)
            return True
        return False

    # ====================== –ê–í–¢–û-–ü–ê–£–ó–ê ======================
    async def check_autopause(self):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–∞–¥–∫–∏ equity ‚Üí –µ—Å–ª–∏ > EQUITY_DRAWDOWN_PCT ‚Üí COPY_ACTIVE=False
        """
        now = time.time()
        if now - self.last_check < 10:
            return
        self.last_check = now

        follower_eq = self.api.get_follower_equity()
        self.max_equity = max(self.max_equity, follower_eq)
        drawdown_pct = 0
        if self.max_equity > 0:
            drawdown_pct = (1 - follower_eq / self.max_equity) * 100

        limit = self.cfg.get("EQUITY_DRAWDOWN_PCT", 15)
        if drawdown_pct >= limit and self.cfg.get("COPY_ACTIVE", True):
            logging.warning(f"üõë –ü—Ä–æ—Å–∞–¥–∫–∞ {drawdown_pct:.1f}% ‚â• {limit}% ‚Üí –ø–∞—É–∑–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
            self.cfg["COPY_ACTIVE"] = False
            save_config(self.cfg)

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ AUTO_CLOSE_ON_DRAWDOWN
            if self.cfg.get("AUTO_CLOSE_ON_DRAWDOWN", False):
                positions = self.api.get_positions()
                for pos in positions:
                    if float(pos["size"]) != 0:
                        self.api.close_position(pos["symbol"])

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            self.api.send_telegram_message("‚ö†Ô∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑-–∑–∞ –ø—Ä–æ—Å–∞–¥–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞")

    # ====================== –ü–†–û–ß–ò–ï –ü–†–û–í–ï–†–ö–ò ======================
    def check_liq_buffer(self, symbol):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –¥–æ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏"""
        buf_min = self.cfg.get("MIN_LIQ_BUFFER_PCT", 20)
        pos = self.api.get_position(symbol)
        if not pos or float(pos["size"]) == 0:
            return
        mark = self.api.get_mark_price(symbol)
        liq = float(pos.get("liqPrice") or 0)
        if mark and liq:
            buffer = abs(mark - liq) / mark * 100
            if buffer < buf_min:
                logging.warning(f"‚ö†Ô∏è {symbol}: –±—É—Ñ–µ—Ä –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ {buffer:.2f}% < {buf_min}%")
