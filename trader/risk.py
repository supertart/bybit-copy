"""
–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏ (Risk Manager)
---------------------------------------
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å,
—Ä–∞—Å—á—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –ª–æ—Ç–∞ –∏ –æ—Ü–µ–Ω–∫—É —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.
"""

import logging
from decimal import Decimal

logger = logging.getLogger(__name__)


class RiskManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∏—Å–∫–æ–≤ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É –∏ —Å –∫–∞–∫–∏–º –æ–±—ä—ë–º–æ–º.
    """

    def __init__(self, cfg: dict, api=None):
        """
        cfg ‚Äî –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (.env)
        api ‚Äî –æ–±—ä–µ–∫—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
        """
        self.cfg = cfg
        self.api = api
        self.max_leverage = 50           # –º–∞–∫—Å. —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–µ –ø–ª–µ—á–æ
        self.max_risk_per_trade = 0.05   # –¥–æ–ª—è —Ä–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫—É (5%)
        self.min_balance_threshold = 10  # –º–∏–Ω–∏–º—É–º –¥–ª—è —Ä–∞–±–æ—Ç—ã (USDT)
        self.test_mode = self.cfg.get("FOLLOWER_NET", "mainnet") == "testnet"

        logger.info(
            f"üîí –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RiskManager (test_mode={self.test_mode}, "
            f"max_risk={self.max_risk_per_trade * 100:.1f}%)"
        )

    # ================================================================
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
    # ================================================================

    def check_balance(self, balance: float) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–¥–µ–ª–∫–∏"""
        if balance < self.min_balance_threshold:
            logger.warning(
                f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å ({balance:.2f} USDT) "
                f"‚Äî –º–∏–Ω–∏–º—É–º {self.min_balance_threshold:.2f} USDT."
            )
            return False
        return True

    # ================================================================
    # üîπ –†–∞—Å—á—ë—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
    # ================================================================

    def calculate_position_size(self, balance: float, price: float, leverage: float = 10) -> float:
        """
        –†–∞—Å—á—ë—Ç –æ–±—ä—ë–º–∞ –ø–æ–∑–∏—Ü–∏–∏ –∏—Å—Ö–æ–¥—è –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ —Ä–∏—Å–∫–∞.
        """
        if balance <= 0 or price <= 0:
            logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏.")
            return 0.0

        risk_amount = balance * self.max_risk_per_trade
        allowed_margin = risk_amount * leverage
        position_size = allowed_margin / price

        logger.debug(
            f"üí∞ –†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: –±–∞–ª–∞–Ω—Å={balance:.2f}, —Ä–∏—Å–∫={risk_amount:.2f}, "
            f"—Ü–µ–Ω–∞={price:.2f}, –ø–ª–µ—á–æ={leverage}, –æ–±—ä—ë–º={position_size:.6f}"
        )
        return round(position_size, 6)

    # ================================================================
    # üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –ª–∏–∫–≤–∏–¥–∞—Ü–∏—é
    # ================================================================

    def check_liquidation_risk(self, side: str, entry_price: float, balance: float, leverage: float = 10) -> bool:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –Ω–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω–æ–º –¥–≤–∏–∂–µ–Ω–∏–∏.
        """
        if not all([entry_price, balance]):
            logger.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏.")
            return False

        liquidation_distance = (1 / leverage) * 100
        logger.debug(
            f"üìâ –†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ –¥–ª—è {side.upper()}: –ø–ª–µ—á–æ={leverage} ‚Üí "
            f"–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ ¬±{liquidation_distance:.2f}%"
        )

        if leverage > self.max_leverage:
            logger.warning(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å. –ø–ª–µ—á–æ: {leverage}x (–ª–∏–º–∏—Ç {self.max_leverage}x)")
            return False

        return True

    # ================================================================
    # üîπ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∏—Å–∫–∞ –∫ —Å–¥–µ–ª–∫–µ
    # ================================================================

    def apply_risk_rules(self, symbol: str, side: str, price: float, balance: float, leverage: float = 10) -> dict:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–∏—Å–∫-–ø—Ä–∞–≤–∏–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å–¥–µ–ª–∫–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.
        """
        if not self.check_balance(balance):
            return {"allowed": False, "reason": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"}

        if not self.check_liquidation_risk(side, price, balance, leverage):
            return {"allowed": False, "reason": "–†–∏—Å–∫ –ª–∏–∫–≤–∏–¥–∞—Ü–∏–∏ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫"}

        qty = self.calculate_position_size(balance, price, leverage)
        allowed = qty > 0

        result = {
            "allowed": allowed,
            "symbol": symbol,
            "side": side,
            "qty": qty,
            "leverage": leverage,
            "price": price,
            "test_mode": self.test_mode,
        }

        logger.info(
            f"‚úÖ –†–∏—Å–∫-–ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è {symbol}: "
            f"{'—Ä–∞–∑—Ä–µ—à–µ–Ω–æ' if allowed else '–∑–∞–ø—Ä–µ—â–µ–Ω–æ'}, –æ–±—ä—ë–º={qty}, –ø–ª–µ—á–æ={leverage}x"
        )
        return result

    # ================================================================
    # üîπ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ .env)
    # ================================================================

    def update_settings(self, **kwargs):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∏—Å–∫–∞ (–≤ –ø–∞–º—è—Ç–∏, –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env).
        """
        for key, value in kwargs.items():
            if hasattr(self, key):
                setattr(self, key, value)
                logger.info(f"‚öôÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ {key} = {value}")
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ä–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ .env)")
