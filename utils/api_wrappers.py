import requests
import logging
import time
import hmac
import hashlib
import json
from urllib.parse import urlencode

# ====================== BYBIT API WRAPPER ===========================
class BybitHTTP:
    """
    –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π HTTP-–∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API Bybit.
    –†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å –º–∞—Å—Ç–µ—Ä–æ–º, —Ç–∞–∫ –∏ —Å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º.
    """

    def __init__(self, api_key, api_secret, testnet=False):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = "https://api-testnet.bybit.com" if testnet else "https://api.bybit.com"
        self.session = requests.Session()
        self.session.headers.update({"Content-Type": "application/json"})

    # ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ----------
    def _sign(self, params):
        param_str = urlencode(sorted(params.items()))
        return hmac.new(
            bytes(self.api_secret, "utf-8"),
            bytes(param_str, "utf-8"),
            hashlib.sha256
        ).hexdigest()

    def _request(self, method, path, params=None, body=None, auth=True):
        url = f"{self.base_url}{path}"
        headers = {}
        if auth:
            timestamp = str(int(time.time() * 1000))
            params = params or {}
            params.update({"api_key": self.api_key, "timestamp": timestamp})
            sign = self._sign(params)
            params["sign"] = sign
        try:
            if method == "GET":
                r = self.session.get(url, params=params, timeout=10)
            else:
                r = self.session.post(url, json=body or params, timeout=10)
            data = r.json()
            if data.get("retCode", 0) != 0:
                logging.warning(f"Bybit API error {path}: {data}")
            return data.get("result", {})
        except Exception as e:
            logging.warning(f"Bybit request failed: {e}")
            return {}

    # ---------- –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã ----------
    def get_positions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
        res = self._request("GET", "/v5/position/list", {"category": "linear"})
        return res.get("list", []) if isinstance(res, dict) else []

    def get_position(self, symbol):
        for pos in self.get_positions():
            if pos["symbol"] == symbol:
                return pos
        return None

    def get_mark_price(self, symbol):
        res = self._request("GET", "/v5/market/tickers", {"category": "linear", "symbol": symbol})
        try:
            return float(res["list"][0]["markPrice"])
        except Exception:
            return 0.0

    def get_volatility(self, symbol):
        """–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ: –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å = abs(price24hPcnt)*100"""
        res = self._request("GET", "/v5/market/tickers", {"category": "linear", "symbol": symbol})
        try:
            return abs(float(res["list"][0]["price24hPcnt"])) * 100
        except Exception:
            return 0.0

    def market_order(self, symbol, side, qty, reduce_only=False):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –º–∞—Ä–∫–µ—Ç-–æ—Ä–¥–µ—Ä–∞"""
        body = {
            "category": "linear",
            "symbol": symbol,
            "side": side,
            "orderType": "Market",
            "qty": str(qty),
            "reduceOnly": reduce_only
        }
        res = self._request("POST", "/v5/order/create", body)
        logging.info(f"üü¢ –û—Ä–¥–µ—Ä {side} {qty} {symbol} ‚Üí {res}")
        return res

    def close_position(self, symbol):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ–π –ø–æ–∑–∏—Ü–∏–∏"""
        pos = self.get_position(symbol)
        if not pos or float(pos.get("size") or 0) == 0:
            return
        side = "Sell" if pos["side"] == "Buy" else "Buy"
        qty = float(pos["size"])
        self.market_order(symbol, side, qty, reduce_only=True)

    def set_take_profit(self, symbol, price):
        pos = self.get_position(symbol)
        if not pos:
            return
        body = {
            "category": "linear",
            "symbol": symbol,
            "takeProfit": str(price)
        }
        self._request("POST", "/v5/position/trading-stop", body)
        logging.info(f"‚úÖ TP {symbol} = {price}")

    def set_stop_loss(self, symbol, price):
        pos = self.get_position(symbol)
        if not pos:
            return
        body = {
            "category": "linear",
            "symbol": symbol,
            "stopLoss": str(price)
        }
        self._request("POST", "/v5/position/trading-stop", body)
        logging.info(f"‚úÖ SL {symbol} = {price}")

    def get_follower_equity(self):
        """–ë–∞–ª–∞–Ω—Å –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
        res = self._request("GET", "/v5/account/wallet-balance", {"accountType": "UNIFIED"})
        try:
            return float(res["list"][0]["coin"][0]["walletBalance"])
        except Exception:
            return 0.0

    def get_master_equity(self):
        """–ë–∞–ª–∞–Ω—Å –º–∞—Å—Ç–µ—Ä–∞ (—Ç–æ—Ç –∂–µ –º–µ—Ç–æ–¥, –Ω–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ API-–∫–ª—é—á–∞)"""
        return self.get_follower_equity()

    # ---------- Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ----------
    def send_telegram_message(self, text):
        try:
            token = self.api_key  # –∑–∞–≥–ª—É—à–∫–∞ ‚Äî —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ cfg, –Ω–µ –∑–¥–µ—Å—å
            logging.info(f"Telegram: {text}")
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
